; ModuleID = "__main__"
target triple = "unknown-unknown-unknown"
target datalayout = ""

define void @"void_none"() 
{
setup:
  br label %"entry"
entry:
  br label %"exit"
exit:
  ret void
}

define double @"fadd"(double %".1") 
{
setup:
  %".3" = alloca double
  store double 0x40091eb851eb851f, double* %".3"
  %".8" = alloca double
  br label %"entry"
entry:
  %".6" = load double, double* %".3"
  %".7" = fadd double %".6", 0x4000fbe76c8b4396
  store double %".7", double* %".8"
  br label %"exit"
exit:
  %".11" = load double, double* %".8"
  ret double %".11"
}

define i64 @"negation"(i64 %".1") 
{
setup:
  %".3" = alloca i64
  store i64 3, i64* %".3"
  %".8" = alloca i64
  br label %"entry"
entry:
  %".6" = load i64, i64* %".3"
  %".7" = sub i64 0, %".6"
  store i64 %".7", i64* %".8"
  br label %"exit"
exit:
  %".11" = load i64, i64* %".8"
  ret i64 %".11"
}

define i64 @"shift0"(i64 %".1", i64 %".2") 
{
setup:
  %".4" = alloca i64
  store i64 8, i64* %".4"
  %".6" = alloca i64
  store i64 2, i64* %".6"
  %".12" = alloca i64
  br label %"entry"
entry:
  %".9" = load i64, i64* %".4"
  %".10" = load i64, i64* %".6"
  %".11" = shl i64 %".9", %".10"
  store i64 %".11", i64* %".12"
  br label %"exit"
exit:
  %".15" = load i64, i64* %".12"
  ret i64 %".15"
}

define i64 @"mod"(i64 %".1", i64 %".2") 
{
setup:
  %".4" = alloca i64
  store i64 21, i64* %".4"
  %".6" = alloca i64
  store i64 4, i64* %".6"
  %".18" = alloca i64
  br label %"entry"
entry:
  %".9" = load i64, i64* %".4"
  %".10" = load i64, i64* %".6"
  %".11" = urem i64 %".9", %".10"
  %".12" = icmp sge i64 %".9", 0
  %".13" = sub i64 0, %".9"
  %".14" = urem i64 %".13", %".10"
  %".15" = sub i64 %".10", %".14"
  %".16" = urem i64 %".15", %".10"
  %".17" = select i1 %".12", i64 %".11", i64 %".16"
  store i64 %".17", i64* %".18"
  br label %"exit"
exit:
  %".21" = load i64, i64* %".18"
  ret i64 %".21"
}

define double @"int_float"() 
{
setup:
  %".3" = alloca i64
  %".5" = alloca double
  %".16" = alloca double
  %".19" = alloca double
  br label %"entry"
entry:
  store i64 1, i64* %".3"
  store double 0x3ffb333333333333, double* %".5"
  %".7" = load double, double* %".5"
  %".8" = load i64, i64* %".3"
  %".9" = sitofp i64 %".8" to double
  %".10" = fadd double %".7", %".9"
  %".11" = load i64, i64* %".3"
  %".12" = sitofp i64 %".11" to double
  %".13" = fadd double %".10", %".12"
  %".14" = load double, double* %".5"
  %".15" = fadd double %".13", %".14"
  store double %".15", double* %".16"
  %".18" = load double, double* %".16"
  store double %".18", double* %".19"
  br label %"exit"
exit:
  %".22" = load double, double* %".19"
  ret double %".22"
}

define i64 @"change_value"(i64 %".1", i64 %".2") 
{
setup:
  %".4" = alloca i64
  store i64 5, i64* %".4"
  %".6" = alloca i64
  store i64 7, i64* %".6"
  %".14" = alloca i64
  br label %"entry"
entry:
  %".9" = load i64, i64* %".4"
  %".10" = load i64, i64* %".6"
  %".11" = add i64 %".9", %".10"
  store i64 %".11", i64* %".4"
  %".13" = load i64, i64* %".4"
  store i64 %".13", i64* %".14"
  br label %"exit"
exit:
  %".17" = load i64, i64* %".14"
  ret i64 %".17"
}

define i1 @"and0"() 
{
setup:
  %".3" = alloca i64
  %".5" = alloca i64
  %".13" = alloca i1
  br label %"entry"
entry:
  store i64 1, i64* %".3"
  store i64 2, i64* %".5"
  %".7" = load i64, i64* %".3"
  %".8" = icmp eq i64 %".7", 1
  %".9" = load i64, i64* %".5"
  %".10" = icmp eq i64 %".9", 2
  %".11" = and i1 %".8", %".10"
  br i1 %".11", label %"then", label %"else"
exit:
  %".19" = load i1, i1* %".13"
  ret i1 %".19"
then:
  store i1 true, i1* %".13"
  br label %"exit"
else:
  br label %"end"
end:
  store i1 false, i1* %".13"
  br label %"exit"
}

define i1 @"cond"(i64 %".1", i64 %".2", i8 %".3") 
{
setup:
  %".5" = alloca i64
  store i64 5, i64* %".5"
  %".7" = alloca i64
  store i64 4, i64* %".7"
  %".9" = alloca i8
  store i8 5, i8* %".9"
  %".18" = alloca i1
  br label %"entry"
entry:
  %".12" = load i8, i8* %".9"
  %".13" = icmp eq i8 %".12", 0
  br i1 %".13", label %"then", label %"else"
exit:
  %".69" = load i1, i1* %".18"
  ret i1 %".69"
then:
  %".15" = load i64, i64* %".5"
  %".16" = load i64, i64* %".7"
  %".17" = icmp eq i64 %".15", %".16"
  store i1 %".17", i1* %".18"
  br label %"exit"
else:
  %".21" = load i8, i8* %".9"
  %".22" = icmp eq i8 %".21", 1
  br i1 %".22", label %"then.1", label %"else.1"
end:
  store i1 false, i1* %".18"
  br label %"exit"
then.1:
  %".24" = load i64, i64* %".5"
  %".25" = load i64, i64* %".7"
  %".26" = icmp ne i64 %".24", %".25"
  store i1 %".26", i1* %".18"
  br label %"exit"
else.1:
  %".29" = load i8, i8* %".9"
  %".30" = icmp eq i8 %".29", 2
  br i1 %".30", label %"then.2", label %"else.2"
end.1:
  br label %"end"
then.2:
  %".32" = load i64, i64* %".5"
  %".33" = load i64, i64* %".7"
  %".34" = icmp sgt i64 %".32", %".33"
  store i1 %".34", i1* %".18"
  br label %"exit"
else.2:
  %".37" = load i8, i8* %".9"
  %".38" = icmp eq i8 %".37", 3
  br i1 %".38", label %"then.3", label %"else.3"
end.2:
  br label %"end.1"
then.3:
  %".40" = load i64, i64* %".5"
  %".41" = load i64, i64* %".7"
  %".42" = icmp sge i64 %".40", %".41"
  store i1 %".42", i1* %".18"
  br label %"exit"
else.3:
  %".45" = load i8, i8* %".9"
  %".46" = icmp eq i8 %".45", 4
  br i1 %".46", label %"then.4", label %"else.4"
end.3:
  br label %"end.2"
then.4:
  %".48" = load i64, i64* %".5"
  %".49" = load i64, i64* %".7"
  %".50" = icmp slt i64 %".48", %".49"
  store i1 %".50", i1* %".18"
  br label %"exit"
else.4:
  %".53" = load i8, i8* %".9"
  %".54" = icmp eq i8 %".53", 5
  br i1 %".54", label %"then.5", label %"else.5"
end.4:
  br label %"end.3"
then.5:
  %".56" = load i64, i64* %".5"
  %".57" = load i64, i64* %".7"
  %".58" = icmp sle i64 %".56", %".57"
  store i1 %".58", i1* %".18"
  br label %"exit"
else.5:
  br label %"end.5"
end.5:
  br label %"end.4"
}

define i1 @"coerce_bool"(i64 %".1") 
{
setup:
  %".3" = alloca i64
  store i64 3, i64* %".3"
  %".9" = alloca i1
  br label %"entry"
entry:
  %".6" = load i64, i64* %".3"
  %".7" = icmp ne i64 %".6", 0
  br i1 %".7", label %"then", label %"else"
exit:
  %".15" = load i1, i1* %".9"
  ret i1 %".15"
then:
  store i1 true, i1* %".9"
  br label %"exit"
else:
  br label %"end"
end:
  store i1 false, i1* %".9"
  br label %"exit"
}

define i64 @"for0"() 
{
setup:
  %".3" = alloca i64
  %".5" = alloca i64
  %".6" = alloca i64
  %".7" = alloca i64
  %".26" = alloca i64
  %".27" = alloca i64
  %".28" = alloca i64
  %".48" = alloca i64
  br label %"entry"
entry:
  store i64 0, i64* %".3"
  br label %"for_init"
exit:
  %".51" = load i64, i64* %".48"
  ret i64 %".51"
for_init:
  store i64 2, i64* %".5"
  store i64 10, i64* %".6"
  store i64 2, i64* %".7"
  br label %"for_cond"
for_cond:
  %".13" = load i64, i64* %".5"
  %".14" = load i64, i64* %".6"
  %".15" = icmp slt i64 %".13", %".14"
  br i1 %".15", label %"for", label %"for_end"
for:
  %".17" = load i64, i64* %".3"
  %".18" = load i64, i64* %".5"
  %".19" = add i64 %".17", %".18"
  store i64 %".19", i64* %".3"
  %".21" = load i64, i64* %".5"
  %".22" = load i64, i64* %".7"
  %".23" = add i64 %".21", %".22"
  store i64 %".23", i64* %".5"
  br label %"for_cond"
for_end:
  br label %"for_init.1"
for_init.1:
  store i64 0, i64* %".26"
  store i64 12, i64* %".27"
  store i64 1, i64* %".28"
  br label %"for_cond.1"
for_cond.1:
  %".34" = load i64, i64* %".26"
  %".35" = load i64, i64* %".27"
  %".36" = icmp slt i64 %".34", %".35"
  br i1 %".36", label %"for.1", label %"for_end.1"
for.1:
  %".38" = load i64, i64* %".3"
  %".39" = load i64, i64* %".26"
  %".40" = add i64 %".38", %".39"
  store i64 %".40", i64* %".3"
  %".42" = load i64, i64* %".26"
  %".43" = load i64, i64* %".28"
  %".44" = add i64 %".42", %".43"
  store i64 %".44", i64* %".26"
  br label %"for_cond.1"
for_end.1:
  %".47" = load i64, i64* %".3"
  store i64 %".47", i64* %".48"
  br label %"exit"
}

define i64 @"for_break"() 
{
setup:
  %".3" = alloca i64
  %".5" = alloca i64
  %".7" = alloca i64
  %".8" = alloca i64
  %".9" = alloca i64
  %".35" = alloca i64
  br label %"entry"
entry:
  store i64 1, i64* %".3"
  store i64 5, i64* %".5"
  br label %"for_init"
exit:
  %".38" = load i64, i64* %".35"
  ret i64 %".38"
for_init:
  store i64 3, i64* %".7"
  store i64 7, i64* %".8"
  store i64 1, i64* %".9"
  br label %"for_cond"
for_cond:
  %".15" = load i64, i64* %".7"
  %".16" = load i64, i64* %".8"
  %".17" = icmp slt i64 %".15", %".16"
  br i1 %".17", label %"for", label %"for_end"
for:
  %".19" = load i64, i64* %".3"
  %".20" = load i64, i64* %".7"
  %".21" = mul i64 %".19", %".20"
  store i64 %".21", i64* %".3"
  %".23" = load i64, i64* %".7"
  %".24" = load i64, i64* %".5"
  %".25" = icmp eq i64 %".23", %".24"
  br i1 %".25", label %"then", label %"else"
for_end:
  %".34" = load i64, i64* %".3"
  store i64 %".34", i64* %".35"
  br label %"exit"
then:
  br label %"for_end"
else:
  br label %"end"
end:
  %".29" = load i64, i64* %".7"
  %".30" = load i64, i64* %".9"
  %".31" = add i64 %".29", %".30"
  store i64 %".31", i64* %".7"
  br label %"for_cond"
}

define i64 @"while0"() 
{
setup:
  %".3" = alloca i64
  %".5" = alloca i64
  %".16" = alloca i64
  br label %"entry"
entry:
  store i64 5, i64* %".3"
  store i64 2, i64* %".5"
  br label %"while"
exit:
  %".19" = load i64, i64* %".16"
  ret i64 %".19"
while:
  %".8" = load i64, i64* %".3"
  %".9" = sub i64 %".8", 1
  store i64 %".9", i64* %".3"
  %".11" = load i64, i64* %".3"
  %".12" = load i64, i64* %".5"
  %".13" = icmp ne i64 %".11", %".12"
  br i1 %".13", label %"while", label %"while_end"
while_end:
  %".15" = load i64, i64* %".3"
  store i64 %".15", i64* %".16"
  br label %"exit"
}

define i64 @"while_break"() 
{
setup:
  %".3" = alloca i64
  %".5" = alloca i64
  %".24" = alloca i64
  br label %"entry"
entry:
  store i64 5, i64* %".3"
  store i64 10, i64* %".5"
  br label %"while"
exit:
  %".27" = load i64, i64* %".24"
  ret i64 %".27"
while:
  %".8" = load i64, i64* %".5"
  %".9" = load i64, i64* %".3"
  %".10" = add i64 %".8", %".9"
  store i64 %".10", i64* %".5"
  %".12" = load i64, i64* %".3"
  %".13" = sub i64 %".12", 1
  store i64 %".13", i64* %".3"
  %".15" = load i64, i64* %".3"
  %".16" = icmp eq i64 %".15", 2
  br i1 %".16", label %"then", label %"else"
while_end:
  %".23" = load i64, i64* %".5"
  store i64 %".23", i64* %".24"
  br label %"exit"
then:
  br label %"while_end"
else:
  br label %"end"
end:
  %".20" = load i64, i64* %".3"
  %".21" = icmp ne i64 %".20", 0
  br i1 %".21", label %"while", label %"while_end"
}

define void @"strings"() 
{
setup:
  br label %"entry"
entry:
  %".3" = bitcast [5 x i8]* @"str_0" to i8*
  %".4" = call i32 (i8*, ...) @"printf"(i8* %".3")
  %".5" = getelementptr [6 x i8], [6 x i8]* @"str_1", i64 0, i64 0
  %".6" = call i32 (i8*, ...) @"printf"(i8* %".5", i64 123)
  %".7" = bitcast [7 x i8]* @"str_2" to i8*
  %".8" = call i32 (i8*, ...) @"printf"(i8* %".7")
  br label %"exit"
exit:
  ret void
}

@"str_0" = internal constant [5 x i8] c"Hey\0a\00"
declare i32 @"printf"(i8* %".1", ...) 

@"str_1" = global [6 x i8] c"%lld\0a\00"
@"str_2" = internal constant [7 x i8] c"Hello\0a\00"
define void @"array0"([10 x i64]* %".1") 
{
setup:
  %".4" = alloca i64
  %".5" = alloca i64
  %".6" = alloca i64
  %".25" = alloca i64
  %".26" = alloca i64
  %".27" = alloca i64
  br label %"entry"
entry:
  br label %"for_init"
exit:
  ret void
for_init:
  store i64 0, i64* %".4"
  store i64 10, i64* %".5"
  store i64 1, i64* %".6"
  br label %"for_cond"
for_cond:
  %".12" = load i64, i64* %".4"
  %".13" = load i64, i64* %".5"
  %".14" = icmp slt i64 %".12", %".13"
  br i1 %".14", label %"for", label %"for_end"
for:
  %".16" = load i64, i64* %".4"
  %".17" = getelementptr [10 x i64], [10 x i64]* %".1", i64 0, i64 %".16"
  %".18" = load i64, i64* %".4"
  store i64 %".18", i64* %".17"
  %".20" = load i64, i64* %".4"
  %".21" = load i64, i64* %".6"
  %".22" = add i64 %".20", %".21"
  store i64 %".22", i64* %".4"
  br label %"for_cond"
for_end:
  br label %"for_init.1"
for_init.1:
  store i64 0, i64* %".25"
  store i64 10, i64* %".26"
  store i64 1, i64* %".27"
  br label %"for_cond.1"
for_cond.1:
  %".33" = load i64, i64* %".25"
  %".34" = load i64, i64* %".26"
  %".35" = icmp slt i64 %".33", %".34"
  br i1 %".35", label %"for.1", label %"for_end.1"
for.1:
  %".37" = load i64, i64* %".25"
  %".38" = getelementptr [10 x i64], [10 x i64]* %".1", i64 0, i64 %".37"
  %".39" = load i64, i64* %".38"
  %".40" = getelementptr [6 x i8], [6 x i8]* @"str_3", i64 0, i64 0
  %".41" = call i32 (i8*, ...) @"printf"(i8* %".40", i64 %".39")
  %".42" = load i64, i64* %".25"
  %".43" = load i64, i64* %".27"
  %".44" = add i64 %".42", %".43"
  store i64 %".44", i64* %".25"
  br label %"for_cond.1"
for_end.1:
  br label %"exit"
}

@"str_3" = global [6 x i8] c"%lld\0a\00"